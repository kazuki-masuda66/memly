# FSRSアルゴリズムの技術解説と実装方法

## FSRS（Free Spaced Repetition Scheduler）とは
FSRS（Free Spaced Repetition Scheduler）とは、学習カードの復習間隔を最適化する新世代の間隔反復（SRS）アルゴリズムです。Ankiなどに搭載された従来のSM2アルゴリズムを改良したもので、**Piotr Wozniak**（SuperMemoの開発者）が提唱したDSR（Difficulty, Stability, Retrievability）モデルに基づいています ([GitHub - open-spaced-repetition/free-spaced-repetition-scheduler: A spaced repetition algorithm based on DSR model](https://github.com/open-spaced-repetition/free-spaced-repetition-scheduler#:~:text=What%20is%20the%20principle%20of,FSRS))。FSRSは**Jarrett Ye**氏らによって開発され、オープンソースで公開されています。名前の“Free”は「ユーザーが復習のタイミングを前倒し・遅延してもアルゴリズムが適応する自由度」を意味しており、ユーザーデータは全てローカルで処理されます ([GitHub - open-spaced-repetition/free-spaced-repetition-scheduler: A spaced repetition algorithm based on DSR model](https://github.com/open-spaced-repetition/free-spaced-repetition-scheduler#:~:text=The%20algorithm%20,adapt%20to%20the%20user%27s%20memory))。

FSRSアルゴリズムは2023年にAnki本体へも実装され、高精度なスケジューリングで注目を集めています。実際、**FSRS v4**（2023年7月公開、パラメータ17個）はSuperMemo-17アルゴリズムと比較したベンチマークでわずかに上回る予測精度を示しました ([FSRS is now the most accurate spaced repetition algorithm in the world* : r/Anki](https://www.reddit.com/r/Anki/comments/18csuer/fsrs_is_now_the_most_accurate_spaced_repetition/#:~:text=,This))。これは、SuperMemoが6段階評価であるのに対しFSRSは最大4段階評価で情報量が少ないにもかかわらず達成された結果です。こうした精度の高さから、FSRSは現時点で最も正確なSRSアルゴリズムの一つと考えられています ([FSRS is now the most accurate spaced repetition algorithm in the world* : r/Anki](https://www.reddit.com/r/Anki/comments/18csuer/fsrs_is_now_the_most_accurate_spaced_repetition/#:~:text=,This))。

## メモリモデルとアルゴリズムの原理
FSRSは**DSRモデル**（3要素モデル）にもとづき、以下の3つの要素で記憶の状態を表現します ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=The%20DSR%20Model)):

- **難易度 (Difficulty, D)** – そのカードの覚えにくさを表す値。**1～10**の範囲の実数で、数値が大きいほど覚えづらいことを意味します ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=type%20S%20%3D%20f64%3B))。例えばD=1は非常に易しいカード、D=10は極めて難しいカードです。
- **安定度 (Stability, S)** – 記憶の**保持強度**を表す値で、現在の100%記憶状態から90%の想起率に低下するまでの日数として定義されます ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=type%20R%20%3D%20f64%3B))。単位は日で、値が大きいほど忘却に時間がかかる＝長期記憶になっていることを示します。
- **想起可能性 (Retrievability, R)** – 現時点でそのカードを想起できる確率（0～1の値）です ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=Retrievability%20,0%2C%201))。時間経過とともにRは低下し、復習の直後はR=1（100%）となります。

FSRSでは各カードに対して難易度Dと安定度Sを記録し、経過日数から動的に想起可能性Rを計算します。新規カードの初回復習時には、その評価に応じて初期安定度$S_0$と初期難易度$D_0$を決定します。例えば初回評価が「忘却」なら$S_0 = w_0$日、評価が「容易」なら$S_0 = w_3$日とパラメータ$w_0～w_3$で定義されます ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=%5C%5BS_0%28G%29%20%3D%20w_%7BG))。また初回難易度は評価に応じて以下の式で計算されます ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=The%20initial%20difficulty%2C%20after%20the,first%20review%2C%20is%20defined%20by)):

\[D_0(G) = w_4 - e^{\,w_5 \cdot (G-1)} + 1\]

ここで$G$は初回評価（後述の1～4の値）です。この式により、初回評価が良いほど$D_0$が小さく（易しく）設定され、逆に悪いほど難易度が高く設定されます ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=Note%20that%20when%20%24G%3D1%24%20,first%20review%20was%20a%20failure))。例えば$G=1$（失敗）なら$D_0 = w_4$となり、開発者提供のデフォルト値では**$D_0(失敗時) \approx 5.16$**、**$D_0(容易時)\approx 2.88$**程度になります ([The Algorithm · open-spaced-repetition/fsrs4anki Wiki · GitHub](https://github.com/open-spaced-repetition/fsrs4anki/wiki/The-Algorithm#:~:text=Default%20parameters))。

次回の復習間隔（インターバル）は、目標とする想起率（デフォルトで90%）に基づいて計算されます。FSRSは「次の復習時に**$R_d=0.9$**となるように間隔を設定する」ことを基本目標としており、具体的には以下の関係式を用います ([The Algorithm · open-spaced-repetition/fsrs4anki Wiki · GitHub](https://github.com/open-spaced-repetition/fsrs4anki/wiki/The-Algorithm#:~:text=where%20%24R%28t%2CS%29%3D0)):

\[ R(t, S) = 0.9 \text{ when } t = S, \]

\[ I(r_d, S) = S \cdot \frac{\ln(r_d)}{\ln(0.9)}. \]

ここで$r_d$は要求想起率（既定値0.9）です。この式により、現在の安定度$S$に応じて**「$r_d$の想起率を維持できる最大の間隔」**が計算されます ([The Algorithm · open-spaced-repetition/fsrs4anki Wiki · GitHub](https://github.com/open-spaced-repetition/fsrs4anki/wiki/The-Algorithm#:~:text=where%20%24R%28t%2CS%29%3D0))。例えば$r_d=0.9$であれば$I(0.9,S)=S$となり、想起率90%を維持できるギリギリの間隔＝現在の安定度そのものが次回間隔になります。目標想起率を下げれば間隔は長くなり、上げれば短くなります（通常は0.9に固定）。このようにFSRSはカード個別の記憶状況に合わせて**科学的根拠に基づいた最適な復習間隔**を算出します ([The Algorithm · open-spaced-repetition/fsrs4anki Wiki · GitHub](https://github.com/open-spaced-repetition/fsrs4anki/wiki/The-Algorithm#:~:text=1,spacing%20effect%20accumulates%20over%20time))。

さらにFSRSの数式には、記憶に関する経験則（メモリ法則）が組み込まれています ([The Algorithm · open-spaced-repetition/fsrs4anki Wiki · GitHub](https://github.com/open-spaced-repetition/fsrs4anki/wiki/The-Algorithm#:~:text=1,spacing%20effect%20accumulates%20over%20time)):

- **難しい素材の効果**: 覚える内容が複雑・難しいほど、1回の復習で安定度が増加する度合い（Sの伸び幅）は小さくなります ([The Algorithm · open-spaced-repetition/fsrs4anki Wiki · GitHub](https://github.com/open-spaced-repetition/fsrs4anki/wiki/The-Algorithm#:~:text=1,spacing%20effect%20accumulates%20over%20time))。難易度Dが大きいほど記憶が定着しづらいことを反映しています。
- **安定度の飽和**: 既に安定度Sが高い（記憶が定着している）ほど、さらなる復習による安定度向上効果は小さくなります ([The Algorithm · open-spaced-repetition/fsrs4anki Wiki · GitHub](https://github.com/open-spaced-repetition/fsrs4anki/wiki/The-Algorithm#:~:text=material,spacing%20effect%20accumulates%20over%20time))。長期記憶になるほど記憶力は飽和していき、いくら復習しても劇的には伸びないということです。
- **ギリギリでの復習効果**: 想起可能性Rが低い（忘れかけている）状態で復習した方が、安定度の増加率は大きくなります ([The Algorithm · open-spaced-repetition/fsrs4anki Wiki · GitHub](https://github.com/open-spaced-repetition/fsrs4anki/wiki/The-Algorithm#:~:text=the%20higher%20the%20stability%20of,spacing%20effect%20accumulates%20over%20time))。**「忘却しかけで復習する」**ほうが記憶効果が高い（間隔効果）という反復学習の原則を取り入れています ([The Algorithm · open-spaced-repetition/fsrs4anki Wiki · GitHub](https://github.com/open-spaced-repetition/fsrs4anki/wiki/The-Algorithm#:~:text=the%20higher%20the%20stability%20of,spacing%20effect%20accumulates%20over%20time))。

これらの要素を総合し、FSRSは各復習時にカードの**安定度Sと難易度Dを更新**し、次回復習日時を決定します ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=2,the%20card%20for%20that%20day))。アルゴリズム全体の流れは次の通りです ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=The%20main%20loop%20of%20the,algorithm%20is)):

1. **ユーザーの解答評価**（4段階評価）を取得する。  
2. **想起可能性Rの計算**: 前回復習からの経過日数を元に現在のRを算出する。例えば前回から$t$日経過していれば$R = e^{-\frac{t}{S}}$（初期状態では$t=0$なので$R=1$）。  
3. **安定度Sの更新**: 評価に応じて新しい安定度$S'$を計算する（後述）。  
4. **難易度Dの更新**: 評価に応じて新しい難易度$D'$を計算する（後述）。  
5. **次回間隔の計算**: 更新後の安定度$S'$と目標想起率$r_d$から次回復習までの間隔$I$を算出する ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=We%20then%20calculate%20the%20interval,interval%20within%20the%20same%20day)) ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=t%20%2B%3D%20i%3B%20let%20r%3A,))。求めた日数を**次回の予定日**としてカードにセットする（最低1日は開ける） ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=We%20then%20calculate%20the%20interval,interval%20within%20the%20same%20day)) ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=t%20%2B%3D%20i%3B%20let%20r%3A,))。

この過程をカードごとに繰り返し、各カードのレビュー計画を調整していくのがFSRSの基本動作です。

## ユーザー評価とスケジューリングロジック
FSRSでは、各復習時にユーザーが以下の**4段階の評価**から自己評価を選択します ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=The%20user%E2%80%99s%20self,grade%2C%20and%20it%E2%80%99s%20one%20of))（Ankiの「Again/Hard/Good/Easy」に相当）:

- **忘却**（*Forgot*） – 全く思い出せなかった（評価値=1） ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=The%20user%E2%80%99s%20self,grade%2C%20and%20it%E2%80%99s%20one%20of))  
- **難しい**（*Hard*） – 何とか思い出せたが非常に困難だった（評価値=2） ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=,%E2%80%9Ceasy%E2%80%9D))  
- **容易**（*Good*） – 思い出せた（多少の時間やヒントで想起できた）（評価値=3） ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=,%E2%80%9Ceasy%E2%80%9D))  
- **超簡単**（*Easy*） – 簡単にすぐ想起できた（評価値=4） ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=,%E2%80%9Ceasy%E2%80%9D))  

※UI上は「超簡単」「容易」「難しい」「忘却」と表示されますが、内部的には**1～4の評価値**として扱われます ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=The%20user%E2%80%99s%20self,grade%2C%20and%20it%E2%80%99s%20one%20of))。「忘却=1」「難しい=2」「容易=3」「超簡単=4」に対応します。

それぞれの評価に対するFSRSのスケジューリングロジックを解説します。

- **忘却（Fail/Again）**: **復習失敗**と見なされます。FSRSではこれを **「安定度のリセット」** として扱い、現在の安定度Sを大幅に下げます（新たな**ポストラプス安定度**$S'_f$を計算） ([The Algorithm · open-spaced-repetition/fsrs4anki Wiki · GitHub](https://github.com/open-spaced-repetition/fsrs4anki/wiki/The-Algorithm#:~:text=The%20stability%20after%20forgetting%20%28i,lapse%20stability))。具体的には、難易度Dや前回の想起率Rを考慮した数式により次の$S'_f$を算出します ([The Algorithm · open-spaced-repetition/fsrs4anki Wiki · GitHub](https://github.com/open-spaced-repetition/fsrs4anki/wiki/The-Algorithm#:~:text=The%20stability%20after%20forgetting%20%28i,lapse%20stability))。例えばデフォルトパラメータで**S=100日**だったカードを忘却すると、**$S'_f \approx 5日$**程度まで低下します ([The Algorithm · open-spaced-repetition/fsrs4anki Wiki · GitHub](https://github.com/open-spaced-repetition/fsrs4anki/wiki/The-Algorithm#:~:text=%24%24S,R))。このように忘れてしまった場合、次回はごく短期間で再復習させて記憶を立て直す戦略を取ります。難易度Dについても**上昇**します（カードをより「難しい」と評価する）。忘却時は難易度が大きく増加し、例えばD=3だったカードを忘れると次のDは4強に上がるイメージです ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=Hitting%20%E2%80%9Cgood%E2%80%9D%20leaves%20difficulty%20unchanged%3A,difficulty%20to%20just%20above%20%244))。この結果、その後の復習間隔も短めに抑えられるようになります。

- **難しい（Hard）**: **ギリギリ成功**したケースです。カードは想起できていますので安定度Sは増加しますが、その増加幅には**「ハードペナルティ」**が適用され抑制されます ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=%24h%24%20is%20the%20hard%20penalty%3A))。FSRSでは内部パラメータ$w_{15}$（0～1の値）を用い、Hard評価時は安定度の成長率に$w_{15}$を乗じて減速させます ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=%24h%24%20is%20the%20hard%20penalty%3A))（典型値$w_{15}\approx0.5$～0.8程度 ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=%24h%24%20is%20the%20hard%20penalty%3A))）。これにより「際どく思い出せた記憶」は次回も早めに復習させて確実に定着させます。また難易度Dは**やや上昇**し、カードを少し難しめに再評価します ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=Hitting%20%E2%80%9Cgood%E2%80%9D%20leaves%20difficulty%20unchanged%3A,difficulty%20to%20just%20above%20%244))（Hardの場合、忘却ほどではないがDが増える）。例えばD=4のカードにHardを付けると次のDは4.5前後に上がる計算です ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=Hitting%20%E2%80%9Cgood%E2%80%9D%20leaves%20difficulty%20unchanged%3A,difficulty%20to%20just%20above%20%244))。このようにHard評価では**「間隔短縮＆難易度アップ」**の方向で次回スケジュールが組まれます。なお、FSRSの実装上はHardも「一応は想起成功」のカテゴリに属し、アルゴリズム内部では**Again（失敗）とHard/Good/Easy（成功）の二分類**で処理されます ([fsrs4anki/docs/tutorial.md at main · open-spaced-repetition ... - GitHub](https://github.com/open-spaced-repetition/fsrs4anki/blob/main/docs/tutorial.md#:~:text=GitHub%20github,button))。

- **容易（Good）**: **問題なく成功**した標準的なケースです。安定度Sは**通常通り増加**し、特別なペナルティやボーナスはありません（HardでもEasyでもないため$h=1, b=1$） ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=%24h%24%20is%20the%20hard%20penalty%3A)) ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=%24b%24%20is%20the%20opposite%20of,a%20bonus%20for%20easy%20recall))。想起率Rが低ければその分大きな安定度向上が得られますし、Rが高ければ微増にとどまります。また難易度Dは**変化しません**（Good評価では$\Delta D = 0$となるよう設計されており、$D' = D$となります ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=Hitting%20%E2%80%9Cgood%E2%80%9D%20leaves%20difficulty%20unchanged%3A,difficulty%20to%20just%20above%20%244))）。したがってカードの難易度印象は維持されます。次回間隔Iは、新しく得られた安定度$S'$と目標想起率0.9に基づき計算されます。FSRSでは**Good評価時の間隔を基準**とし、他の評価の間隔調整はHardやEasyの係数で行うため、Goodは「基準通りのスケジューリング」と言えます ([The Algorithm · open-spaced-repetition/fsrs4anki Wiki · GitHub](https://github.com/open-spaced-repetition/fsrs4anki/wiki/The-Algorithm#:~:text=Note%3A%20the%20intervals%20after%20Hard,hardInterval))。

- **超簡単（Easy）**: **余裕を持って成功**したケースです。安定度Sは**大きく増加**し、**「イージーボーナス」**が適用されます ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=%24b%24%20is%20the%20opposite%20of,a%20bonus%20for%20easy%20recall))。内部パラメータ$w_{16}$（1以上の値）によって、Easy評価時は安定度の成長率がさらに増幅されます ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=effect))（典型値$w_{16}\approx1.3$程度 ([How to use the next-generation spaced repetition algorithm FSRS ...](https://forums.ankiweb.net/t/how-to-use-the-next-generation-spaced-repetition-algorithm-fsrs-on-anki/25415#:~:text=There%20are%20my%20current%20settings%2C,FSRS%20only%20modifies%20the))）。例えば同じ想起率Rでも、Easy評価の方がGood評価よりもSが大きく伸び、次回間隔が長く設定されます。難易度Dは**低下**します（カードが「より易しい」と再評価される） ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=Hitting%20%E2%80%9Cgood%E2%80%9D%20leaves%20difficulty%20unchanged%3A,difficulty%20to%20just%20above%20%244))。具体的にはEasy評価では$\Delta D$が負になるよう設計されており、例えばD=4のカードにEasyを付けると次のDは3程度に下がります ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=Hitting%20%E2%80%9Cgood%E2%80%9D%20leaves%20difficulty%20unchanged%3A,difficulty%20to%20just%20above%20%244))。これにより将来的にもそのカードは長めの間隔で回して良いと判断されます。総じてEasy評価では**「間隔延長＆難易度ダウン」**の方向で次回スケジュールが組まれます。

以上をまとめると、**忘却・難しい**の評価では間隔を短くして早めに再復習、**容易・超簡単**の評価では間隔を延ばして効率化、というメリハリのある調整が行われます。またHard/Good/Easyはいずれも想起成功（**Pass**）として扱われ、FSRS内部では「成功（Hard以上）か失敗（Againか）か」でまず分岐します ([fsrs4anki/docs/tutorial.md at main · open-spaced-repetition ... - GitHub](https://github.com/open-spaced-repetition/fsrs4anki/blob/main/docs/tutorial.md#:~:text=GitHub%20github,button))。成功の場合はさらにHard/Easyかどうかで微調整するイメージです ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=%24h%24%20is%20the%20hard%20penalty%3A)) ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=%24b%24%20is%20the%20opposite%20of,a%20bonus%20for%20easy%20recall))。このシンプルな評価ロジックでありながら、難易度Dと安定度Sをカードごとに更新・保持することで、各カードに最適化されたインターバルを算出できる点がFSRSの特徴です。

## FSRSのパラメータとデフォルト値
FSRSアルゴリズムには多数のパラメータが存在します。**FSRS v4**では**17個の重みパラメータ**によってモデルを調整しており、最新版の**FSRS-5**では19パラメータに拡張されています ([FSRS is now the most accurate spaced repetition algorithm in the world* : r/Anki](https://www.reddit.com/r/Anki/comments/18csuer/fsrs_is_now_the_most_accurate_spaced_repetition/#:~:text=It%20wasn%27t%20terrible%2C%20but%20it,and%20then)) ([ABC of FSRS · open-spaced-repetition/fsrs4anki Wiki - GitHub](https://github.com/open-spaced-repetition/fsrs4anki/wiki/abc-of-fsrs#:~:text=ABC%20of%20FSRS%20%C2%B7%20open,If%20you))。主なパラメータは数式中の$w_0, w_1, ...$などで、例えば:

- $w_0～w_3$: 初回安定度の基準値（初回評価がAgain/Hard/Good/Easyのときの初期S値） ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=The%20first%20time%20the%20user,card%2C%20its%20initial%20stability%20is))。
- $w_4, w_5$: 初回難易度$D_0$計算用のパラメータ ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=The%20initial%20difficulty%2C%20after%20the,first%20review%2C%20is%20defined%20by))。
- $w_6, w_7$: 難易度D更新の係数（難易度変化量$\Delta D$や混合係数に影響） ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=For%20any%20review%20other%20than,first%2C%20difficulty%20is%20updated%20by))。
- $w_8, w_9, w_{10}$: 安定度更新$\alpha$係数の調整項（それぞれ基礎成長率、安定度飽和、想起率飽和に対応） ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=,w_8)) ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=%24t_s%24%20determines%20how%20today%E2%80%99s%20stability,affects%20the%20next%20stability))。
- $w_{15}$: Hardペナルティ係数（Hard時の安定度成長を減衰、0～1の範囲） ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=%24h%24%20is%20the%20hard%20penalty%3A))。
- $w_{16}$: Easyボーナス係数（Easy時の安定度成長を増幅、1以上） ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=%24b%24%20is%20the%20opposite%20of,a%20bonus%20for%20easy%20recall))。

加えて、FSRS実装では**ユーザー設定可能なパラメータ**もいくつか提供されています。例えばFSRS4Ankiやts-fsrsライブラリでは以下のような項目があります ([FSRS4Anki v4.14.4 Simulator - Colab](https://colab.research.google.com/github/open-spaced-repetition/fsrs4anki/blob/v4.14.4/fsrs4anki_simulator.ipynb#:~:text=FSRS4Anki%20v4.14.4%20Simulator%20,0%20minimumInterval%20%3D%201)):

- **requestRetention**（要求想起率）: 次回復習時の目標想起率。デフォルトは**0.9 (90%)**に設定されています ([FSRS算法优化Anki Schedule(15) - 山猫's Blog](https://cs-cn.top/2022/11/02/FSRS4AnkiHelper/#:~:text=FSRS%E7%AE%97%E6%B3%95%E4%BC%98%E5%8C%96Anki%20Schedule%2815%29%20,parameters%20for%20a))。
- **easyBonus**（イージーボーナス）: Easy評価時の間隔倍率。デフォルトは**1.3**で、これは「Easyの場合は通常計算の1.3倍の間隔を与える」ことを意味します ([FSRS4Anki v4.14.4 Simulator - Colab](https://colab.research.google.com/github/open-spaced-repetition/fsrs4anki/blob/v4.14.4/fsrs4anki_simulator.ipynb#:~:text=FSRS4Anki%20v4.14.4%20Simulator%20,0%20minimumInterval%20%3D%201))。
- **hardInterval**（ハード間隔係数）: Hard評価時の間隔倍率。デフォルトは**1.2**で、「Hardの場合は前回間隔の1.2倍を次回間隔の上限とする」目安になります ([FSRS4Anki v4.14.4 Simulator - Colab](https://colab.research.google.com/github/open-spaced-repetition/fsrs4anki/blob/v4.14.4/fsrs4anki_simulator.ipynb#:~:text=FSRS4Anki%20v4.14.4%20Simulator%20,0%20minimumInterval%20%3D%201))。※FSRSではHard時、厳密には安定度計算によりますが、Anki実装では前回間隔に1.2倍を掛けた値と比較して短い方を採用しています ([How to use the next-generation spaced repetition algorithm FSRS ...](https://forums.ankiweb.net/t/how-to-use-the-next-generation-spaced-repetition-algorithm-fsrs-on-anki/25415#:~:text=There%20are%20my%20current%20settings%2C,FSRS%20only%20modifies%20the))。
- **maximumInterval**（最大間隔）: 復習間隔の上限日数。デフォルトは**36500日（約100年）**とし、事実上無制限に近い値です ([FSRS算法优化Anki Schedule(15) - 山猫's Blog](https://cs-cn.top/2022/11/02/FSRS4AnkiHelper/#:~:text=FSRS%E7%AE%97%E6%B3%95%E4%BC%98%E5%8C%96Anki%20Schedule%2815%29%20,parameters%20for%20a))。
- **minimumInterval**（最小間隔）: 復習間隔の下限日数。通常**1日**とします（学習ステップの場合を除く） ([FSRS4Anki v4.14.4 Simulator - Colab](https://colab.research.google.com/github/open-spaced-repetition/fsrs4anki/blob/v4.14.4/fsrs4anki_simulator.ipynb#:~:text=FSRS4Anki%20v4.14.4%20Simulator%20,0%20minimumInterval%20%3D%201))。
- **(re)learning steps**（学習ステップ）: FSRSは**長期スケジューリングのみ**担当するため、新規カード学習や失敗カード再学習の初期ステップ（数分後や翌日など）は別途設定します ([卜晗哲/fsrs4anki - Gitee](https://gitee.com/buhanzhe/fsrs4anki#:~:text=...%20easyBonus,%2F%2F%20I%20recommend))。Ankiデフォルトでは新規カードは「1分→10分→翌日」といった短期ステップを踏みますが、FSRS組み込み時もこれらはAnki設定をそのまま用いるよう推奨されています ([卜晗哲/fsrs4anki - Gitee](https://gitee.com/buhanzhe/fsrs4anki#:~:text=...%20easyBonus,%2F%2F%20I%20recommend))。

上記パラメータにはデフォルト値が用意されており、その組み合わせ（17次元ベクトル）は開発者提供のものがあります ([The Algorithm · open-spaced-repetition/fsrs4anki Wiki · GitHub](https://github.com/open-spaced-repetition/fsrs4anki/wiki/The-Algorithm#:~:text=Default%20parameters))。しかし、ユーザーごとに記憶の癖は異なるため、FSRSでは各自の学習履歴データから**最適なパラメータを機械学習でフィッティングする「オプティマイザ」**も提供しています ([GitHub - open-spaced-repetition/fsrs4anki: A modern Anki custom scheduling based on Free Spaced Repetition Scheduler algorithm](https://github.com/open-spaced-repetition/fsrs4anki#:~:text=FSRS4Anki%20consists%20of%20two%20main,the%20scheduler%20and%20the%20optimizer))。FSRS4Ankiでは学習ログをアップロードして自分専用のパラメータセットを算出する仕組みがあり ([GitHub - open-spaced-repetition/fsrs4anki: A modern Anki custom scheduling based on Free Spaced Repetition Scheduler algorithm](https://github.com/open-spaced-repetition/fsrs4anki#:~:text=,read%20the%20mechanism%20of%20optimization))、これにより一層精度の高い個人化スケジューリングが可能です。もっとも、デフォルト値のままでも従来アルゴリズム（SM-2等）を上回る性能が報告されており ([FSRS is now the most accurate spaced repetition algorithm in the world* : r/Anki](https://www.reddit.com/r/Anki/comments/18csuer/fsrs_is_now_the_most_accurate_spaced_repetition/#:~:text=It%20wasn%27t%20terrible%2C%20but%20it,and%20then)) ([FSRS is now the most accurate spaced repetition algorithm in the world* : r/Anki](https://www.reddit.com/r/Anki/comments/18csuer/fsrs_is_now_the_most_accurate_spaced_repetition/#:~:text=,This))、まずは既定パラメータで利用開始して問題ありません。

なお、FSRSは現在**TypeScript/JavaScript、Python、Go、Rust**など複数の言語で公式実装ライブラリが提供されています ([GitHub - open-spaced-repetition/free-spaced-repetition-scheduler: A spaced repetition algorithm based on DSR model](https://github.com/open-spaced-repetition/free-spaced-repetition-scheduler#:~:text=))。Web/モバイルアプリ開発者はこれらのライブラリを利用することで、アルゴリズム詳細を意識せずにFSRSスケジューラを組み込むことができます。

## React Native/Next.jsへの実装例とコード
React NativeやNext.jsベースのアプリにFSRSアルゴリズムを組み込む場合、前述の公式ライブラリ**ts-fsrs（TypeScript実装）**を利用するのが簡便です ([GitHub - open-spaced-repetition/free-spaced-repetition-scheduler: A spaced repetition algorithm based on DSR model](https://github.com/open-spaced-repetition/free-spaced-repetition-scheduler#:~:text=))。以下、Next.js（React）を例に基本的な実装手順とコード例を示します。

1. **ライブラリのインストール**: npmもしくはyarnで`ts-fsrs`パッケージを追加します（Node.js v18以上推奨） ([GitHub - open-spaced-repetition/ts-fsrs: ts-fsrs is a versatile package based on TypeScript that supports ES modules, CommonJS, and UMD.](https://github.com/open-spaced-repetition/ts-fsrs#:~:text=Usage))。  
   ```bash
   npm install ts-fsrs
   ```
2. **スケジューラの初期化**: アプリ起動時にFSRSスケジューラを初期化します。パラメータはデフォルト生成で問題ありません（必要に応じて`requestRetention`や`maximum_interval`等をオプション指定可能） ([GitHub - open-spaced-repetition/ts-fsrs: ts-fsrs is a versatile package based on TypeScript that supports ES modules, CommonJS, and UMD.](https://github.com/open-spaced-repetition/ts-fsrs#:~:text=import%20,fsrs)) ([GitHub - open-spaced-repetition/ts-fsrs: ts-fsrs is a versatile package based on TypeScript that supports ES modules, CommonJS, and UMD.](https://github.com/open-spaced-repetition/ts-fsrs#:~:text=The%20library%20allows%20for%20customization,example%20setting%20a%20maximum%20interval))。例えばNext.jsのグローバル状態やReact Contextで以下のように初期化します。  

   ```typescript
   import { fsrs, generatorParameters, createEmptyCard, Rating, Card } from 'ts-fsrs';

   // FSRSパラメータ生成（デフォルトでfuzz等無効化）
   const params = generatorParameters({ 
     enable_fuzz: true,        // intervalにランダム揺らぎを加える（必要に応じて）
     enable_short_term: false  // 学習ステップは別管理（Anki方式）
     // 他、maximum_intervalやrequestRetentionも指定可能
   });
   // スケジューラ関数の生成
   const scheduler = fsrs(params);
   ```

3. **カード情報の管理**: 各カードに対し、FSRSが必要とするデータ（安定度S、難易度D、次回予定日など）を保持します。`ts-fsrs`では`Card`オブジェクトにこれらが含まれています。新規カードは`createEmptyCard()`で作成でき、初期状態では**New（新規）**として安定度・難易度は未設定になります ([GitHub - open-spaced-repetition/ts-fsrs: ts-fsrs is a versatile package based on TypeScript that supports ES modules, CommonJS, and UMD.](https://github.com/open-spaced-repetition/ts-fsrs#:~:text=import%20,18T14%3A32%3A03.370Z))。カードごとに以下の情報を保存しておきます（RNならAsyncStorageやSQLite、Next.jsならデータベース/LocalStorage等に保存）:

   - `card.due`: 次回復習予定日時  
   - `card.stability`: 現在の安定度S  
   - `card.difficulty`: 現在の難易度D  
   - `card.last_review`: 最後に復習した日時  
   - `card.state`: 状態（New, Learning, Review, Relearning のいずれか） ([GitHub - open-spaced-repetition/ts-fsrs: ts-fsrs is a versatile package based on TypeScript that supports ES modules, CommonJS, and UMD.](https://github.com/open-spaced-repetition/ts-fsrs#:~:text=match%20at%20L470%20rating%3A%20Rating%3B,the%20card%20before%20the%20review))

4. **評価時のスケジューリング処理**: ユーザーがカードを学習し、4択（超簡単～忘却）のいずれかを選択したら、以下の処理でカードの次回予定を更新します。

   ```typescript
   function onReview(card: Card, rating: Rating) {
     const now = new Date();
     // FSRSで次のスケジュールを計算
     const result = scheduler.next(card, now, rating);
     const updatedCard: Card = result.card;
     const reviewLog = result.log;
     console.log(`評価:${Rating[rating]} → 次回予定日: ${updatedCard.due}`);
     // 更新されたカード情報を保存（state管理やDB保存）
     saveCard(updatedCard);
   }
   ```

   上記のように、`scheduler.next(現在のカード, 現在日時, 評価)`を呼ぶことで、FSRSアルゴリズムがその評価に基づいた**更新後のカードオブジェクト**（安定度・難易度・次回日時など反映済み）と**ログ情報**を返します。例えば評価が`Rating.Easy`（超簡単）なら、内部でEasyボーナス付きの計算が行われ、`updatedCard.due`には現在日時より長い将来の日付が設定されます。`Rating.Again`（忘却）なら`updatedCard.difficulty`が上昇し、`updatedCard.due`は近い将来（日付が早め）に設定されます。**計算後のカードオブジェクトを永続化**することで、次回以降の学習に反映されます。

   > 💡 *補足:* `scheduler.repeat(card, now)`という関数もあり、これは指定カードを**Again/Hard/Good/Easy各評価をした場合の結果をまとめて返す**ユーティリティで ([GitHub - open-spaced-repetition/ts-fsrs: ts-fsrs is a versatile package based on TypeScript that supports ES modules, CommonJS, and UMD.](https://github.com/open-spaced-repetition/ts-fsrs#:~:text=createEmptyCard,repeat%28card%2C%20now))】。例えばボタンに各評価での次回間隔を事前表示したい場合などに利用できます。`repeat`は内部的に`Again, Hard, Good, Easy`の4通りについて`next`を実行し結果を配列で返しま ([GitHub - open-spaced-repetition/ts-fsrs: ts-fsrs is a versatile package based on TypeScript that supports ES modules, CommonJS, and UMD.](https://github.com/open-spaced-repetition/ts-fsrs#:~:text=%2F%2F%20console,...card))】。

5. **UIへの反映**: あとは通常のFlashcardアプリと同様、当日が`card.due`を過ぎたカードをレビュー画面に出し、ユーザーの解答に応じて上記`onReview`処理を呼び出すだけです。React Nativeでもやることは同様で、`ts-fsrs`はReact Native環境（JavaScriptランタイム）で動作します。バックエンドを持つ場合、Next.jsのAPI Routesやサーバー側で同様の計算を行い、結果をクライアントに渡しても構いません。

以上のように、FSRSアルゴリズムは公式実装ライブラリを使うことで比較的容易に組み込めます。**例としてNext.js + Prismaを用いたデモ実装**がGitHub上で公開されているので、参考になるでしょ ([GitHub - open-spaced-repetition/ts-fsrs: ts-fsrs is a versatile package based on TypeScript that supports ES modules, CommonJS, and UMD.](https://github.com/open-spaced-repetition/ts-fsrs#:~:text=%2A%20Docs%20,Next.js%2BDrizzle%2BtRPC))】。またFSRSの公式ドキュメントやビジュアライザも公開されており、パラメータ調整や動作検証に役立ちま ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=As%20far%20as%20I%20know%2C,let%E2%80%99s%20build%20a%20simulation%20tool))】。FSRSを導入することで、ユーザーの学習データに適応した高度な間隔最適化が可能となり、無駄の少ない効率的な学習体験を提供できるでしょう。

**Sources:**

- FSRS公式GitHubリポジトリ (アルゴリズム解説・実装 ([GitHub - open-spaced-repetition/free-spaced-repetition-scheduler: A spaced repetition algorithm based on DSR model](https://github.com/open-spaced-repetition/free-spaced-repetition-scheduler#:~:text=What%20is%20the%20principle%20of,FSRS)) ([GitHub - open-spaced-repetition/free-spaced-repetition-scheduler: A spaced repetition algorithm based on DSR model](https://github.com/open-spaced-repetition/free-spaced-repetition-scheduler#:~:text=The%20algorithm%20,adapt%20to%20the%20user%27s%20memory)) ([GitHub - open-spaced-repetition/free-spaced-repetition-scheduler: A spaced repetition algorithm based on DSR model](https://github.com/open-spaced-repetition/free-spaced-repetition-scheduler#:~:text=))】  
- FSRS4Anki Wiki: アルゴリズム詳 ([The Algorithm · open-spaced-repetition/fsrs4anki Wiki · GitHub](https://github.com/open-spaced-repetition/fsrs4anki/wiki/The-Algorithm#:~:text=1,spacing%20effect%20accumulates%20over%20time)) ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=%24h%24%20is%20the%20hard%20penalty%3A)) ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=%24b%24%20is%20the%20opposite%20of,a%20bonus%20for%20easy%20recall)) ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=Hitting%20%E2%80%9Cgood%E2%80%9D%20leaves%20difficulty%20unchanged%3A,difficulty%20to%20just%20above%20%244))】  
- Borretti, F. “Implementing FSRS in 100 Lines” (理論とコード解説 ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=The%20user%E2%80%99s%20self,grade%2C%20and%20it%E2%80%99s%20one%20of)) ([Implementing FSRS in 100 Lines](https://borretti.me/article/implementing-fsrs-in-100-lines#:~:text=Hitting%20%E2%80%9Cgood%E2%80%9D%20leaves%20difficulty%20unchanged%3A,difficulty%20to%20just%20above%20%244))】  
- Reddit: FSRSアルゴリズムの精度・ベンチマーク議 ([FSRS is now the most accurate spaced repetition algorithm in the world* : r/Anki](https://www.reddit.com/r/Anki/comments/18csuer/fsrs_is_now_the_most_accurate_spaced_repetition/#:~:text=,This)) ([FSRS is now the most accurate spaced repetition algorithm in the world* : r/Anki](https://www.reddit.com/r/Anki/comments/18csuer/fsrs_is_now_the_most_accurate_spaced_repetition/#:~:text=It%20wasn%27t%20terrible%2C%20but%20it,and%20then))】  
- Ankiフォーラム/公式資料: FSRSパラメータ設定 ([How to use the next-generation spaced repetition algorithm FSRS ...](https://forums.ankiweb.net/t/how-to-use-the-next-generation-spaced-repetition-algorithm-fsrs-on-anki/25415#:~:text=There%20are%20my%20current%20settings%2C,FSRS%20only%20modifies%20the)) ([FSRS4Anki v4.14.4 Simulator - Colab](https://colab.research.google.com/github/open-spaced-repetition/fsrs4anki/blob/v4.14.4/fsrs4anki_simulator.ipynb#:~:text=FSRS4Anki%20v4.14.4%20Simulator%20,0%20minimumInterval%20%3D%201))】  
- ts-fsrs ドキュメント (使用方法・コード例 ([GitHub - open-spaced-repetition/ts-fsrs: ts-fsrs is a versatile package based on TypeScript that supports ES modules, CommonJS, and UMD.](https://github.com/open-spaced-repetition/ts-fsrs#:~:text=import%20,fsrs)) ([GitHub - open-spaced-repetition/ts-fsrs: ts-fsrs is a versatile package based on TypeScript that supports ES modules, CommonJS, and UMD.](https://github.com/open-spaced-repetition/ts-fsrs#:~:text=%2F%2F%20console,...card))】